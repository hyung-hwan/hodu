// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: hodu.proto

package hodu

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hodu_GetSeed_FullMethodName      = "/Hodu/GetSeed"
	Hodu_PacketStream_FullMethodName = "/Hodu/PacketStream"
)

// HoduClient is the client API for Hodu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HoduClient interface {
	GetSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error)
	PacketStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Packet, Packet], error)
}

type hoduClient struct {
	cc grpc.ClientConnInterface
}

func NewHoduClient(cc grpc.ClientConnInterface) HoduClient {
	return &hoduClient{cc}
}

func (c *hoduClient) GetSeed(ctx context.Context, in *Seed, opts ...grpc.CallOption) (*Seed, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Seed)
	err := c.cc.Invoke(ctx, Hodu_GetSeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hoduClient) PacketStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Packet, Packet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Hodu_ServiceDesc.Streams[0], Hodu_PacketStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Packet, Packet]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Hodu_PacketStreamClient = grpc.BidiStreamingClient[Packet, Packet]

// HoduServer is the server API for Hodu service.
// All implementations must embed UnimplementedHoduServer
// for forward compatibility.
type HoduServer interface {
	GetSeed(context.Context, *Seed) (*Seed, error)
	PacketStream(grpc.BidiStreamingServer[Packet, Packet]) error
	mustEmbedUnimplementedHoduServer()
}

// UnimplementedHoduServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHoduServer struct{}

func (UnimplementedHoduServer) GetSeed(context.Context, *Seed) (*Seed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeed not implemented")
}
func (UnimplementedHoduServer) PacketStream(grpc.BidiStreamingServer[Packet, Packet]) error {
	return status.Errorf(codes.Unimplemented, "method PacketStream not implemented")
}
func (UnimplementedHoduServer) mustEmbedUnimplementedHoduServer() {}
func (UnimplementedHoduServer) testEmbeddedByValue()              {}

// UnsafeHoduServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HoduServer will
// result in compilation errors.
type UnsafeHoduServer interface {
	mustEmbedUnimplementedHoduServer()
}

func RegisterHoduServer(s grpc.ServiceRegistrar, srv HoduServer) {
	// If the following call pancis, it indicates UnimplementedHoduServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hodu_ServiceDesc, srv)
}

func _Hodu_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Seed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoduServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hodu_GetSeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoduServer).GetSeed(ctx, req.(*Seed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hodu_PacketStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HoduServer).PacketStream(&grpc.GenericServerStream[Packet, Packet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Hodu_PacketStreamServer = grpc.BidiStreamingServer[Packet, Packet]

// Hodu_ServiceDesc is the grpc.ServiceDesc for Hodu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hodu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Hodu",
	HandlerType: (*HoduServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeed",
			Handler:    _Hodu_GetSeed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PacketStream",
			Handler:       _Hodu_PacketStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hodu.proto",
}
